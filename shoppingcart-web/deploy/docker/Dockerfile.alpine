ARG buildimage
ARG runtimeimage

# Stage 0, based on Node.js, to build and compile Angular https://github.com/mark-adams/docker-chromium-xvfb
# This image is built to run Karma+Headless chrome and comes pre-installed for node.
FROM $buildimage as base

WORKDIR /app

COPY package.json /app/
COPY package-lock.json /app/
RUN npm ci

COPY ./ /app/
# TODO: no cypress in example just yet
#COPY cypress.build.json /app/cypress.json
#COPY ./cypress/plugins/ /app/cypress/plugins/

# gathering components from NPM install for linting
#FROM base as lint
#RUN npm run prettier:fix
RUN ng lint

# gathering components from NPM install for unit testing
#FROM base as test
ARG branch
ARG organization
ARG sonarhost
ARG sonartoken
ARG sonarkey
ARG sonarscannerversion
ARG imageversion
ARG analysisArgs

RUN echo "{}" > ./src/config.local.json
RUN npm run build
RUN npm run test:ci

RUN export coveragefiles="$(find `pwd`/coverage -name lcov.info | tr '\n' ',')" && echo $coveragefiles \
  && echo "analysisArgs=$analysisArgs" \
  && sonar-scanner \
  -Dsonar.organization=$organization \
  -Dsonar.projectKey="$sonarkey" \
  -Dsonar.projectVersion="$imageversion" \
  $analysisArgs \
  -Dsonar.host.url="$sonarhost" \
  -Dsonar.login="$sonartoken" \
  -Dsonar.sources="src" \
  -Dsonar.typescript.lcov.reportPaths="$coveragefiles" \
  -Dsonar.exclusions="**/node_modules/**,**/*spec.ts,**/test.ts" \
  $targetArg \
  -Dsonar.tests="src" \
  -Dsonar.test.inclusions=**/*.spec.ts \
  -Dsonar.sourceEncoding="UTF-8"

#TODO:
#RUN npm run cy-ci

# gathering components from NPM install for ng build
FROM base as build
#RUN true
RUN ng build core
RUN ng build --aot --configuration production

# Stage 1, based on Nginx, to have only the compiled app, ready for production with Nginx
FROM $runtimeimage as publish
ARG artifactDirectory
ARG service_name

ENV SERVICE_NAME=$service_name
ENV configpath /usr/share/nginx/html/config.json

COPY --from=build /app/"$artifactDirectory"/ /usr/share/nginx/html
#TODO: waiting for cypress tests
#COPY --from=test /cypress-artifacts /cypress-artifacts

COPY ./deploy/sh/startup.sh /startup.sh
#COPY ./nginx.conf.example /etc/nginx/conf.d/default.conf 
COPY ./src/build.json /usr/share/nginx/html

#RUN sed -i 's/https/http/g' /etc/apk/repositories && \
#    apk update && \
#    apk add --no-cache ca-certificates jq bash curl && \
#    update-ca-certificates && \
#    adduser -S -u 2001 -s /bin/bash appuser && \
#    addgroup -S -g 2001 appuser && addgroup -S nginx && \
#    addgroup appuser appuser; addgroup appuser nginx && \
#    mkdir -p /var/lib/nginx/ /run/nginx/ /var/cache/nginx/client_temp /var/cache/nginx/proxy_temp && \
#    touch /var/run/nginx.pid && \
#    chown -R nginx:nginx /var/lib/nginx/ /run/nginx/ /var/cache/nginx/ /var/run/nginx.pid && \
#    chmod -R g+rwx /var/lib/nginx /run/nginx /var/cache/nginx/ /var/log/nginx /var/run/nginx.pid && \
#    chmod a+x /startup.sh

RUN chmod a+x /startup.sh
RUN chmod -R a+rw /usr/share/nginx/html

RUN sed -i "s/{{service}}/$SERVICE_NAME/g" /etc/nginx/conf.d/default.conf
RUN sed -i "s/{{timestamp}}/$(jq -r '.build.timestamp' /usr/share/nginx/html/build.json)/g" /etc/nginx/conf.d/default.conf
RUN sed -i "s/{{version}}/$(jq -r '.build.version' /usr/share/nginx/html/build.json)/g" /etc/nginx/conf.d/default.conf
RUN sed -i "s/{{tag}}/$(jq -r '.build.tag' /usr/share/nginx/html/build.json)/g" /etc/nginx/conf.d/default.conf
RUN sed -i "s/{{suffix}}/$(jq -r '.build.suffix' /usr/share/nginx/html/build.json)/g" /etc/nginx/conf.d/default.conf

USER user
EXPOSE 8080/tcp
CMD ["/startup.sh"]
